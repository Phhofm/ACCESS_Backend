# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/course_service

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load infrastructure from repo
          command: git clone https://github.com/mp-access/Infrastructure.git
      - run:
          name: Start infrastructure
          command: |
            cd Infrastructure
            docker-compose -f keycloak-postgres.yml up -d

            # docker-compose will start 2 containers, the one with service will be named `keycloak`
            # we start another container with curl in the same network as `keycloak`, this way we have
            # all exposed ports from `keycloak` available on `localhost` in this new container
            docker run --network container:idp appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://idp:8080/auth
            cd ..


      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test

      # Stop infrastructure
      - run: docker-compose -f Infrastructure/keycloak-postgres.yml down