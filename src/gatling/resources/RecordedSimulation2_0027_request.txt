{"type":"code","details":{"graded":false,"publicFiles":[{"id":"5","path":"/script.py","name":"script","extension":"py","content":"if __name__ == '__main__':\n    intercontinental_flight = IntercontinentalAircraft(500, \"Boeing-747\", 100)\n    short_haul_flight = ShortHaulAircraft(110, \"Airbus-A220\")\n    short_haul_flight2 = ShortHaulAircraft(85, \"Airbus-A220\")\n\n    assert short_haul_flight.get_serial_number() == 0\n    assert short_haul_flight2.get_serial_number() == 1\n\n    assert short_haul_flight.get_number_of_passengers() == 110\n    assert short_haul_flight.get_name() == \"Airbus-A220\"\n\n    assert intercontinental_flight.get_number_of_passengers() == 500\n    assert intercontinental_flight.get_name() == \"Boeing-747\"\n\n    assert intercontinental_flight.calculate_amount_of_fuel(10000) == 3250000.\n    assert short_haul_flight.calculate_amount_of_fuel(250) == 2750.\n\n    assert intercontinental_flight.manifest == \"Intercontinental flight Boeing-747: passenger count 500, cargo load 100\"\n    assert short_haul_flight2.manifest == \"Short haul flight serial number 1, name Airbus-A220: passenger count 85\"\n\n    tower = ControlTower()\n    tower.add_aircraft(intercontinental_flight)\n    tower.add_aircraft(short_haul_flight)\n    tower.add_aircraft(short_haul_flight2)\n\n    air_traffic_report = tower.get_manifests()\n    for aircraft in air_traffic_report:\n        print(aircraft)\n\n    # prints:\n    # Intercontinental flight Boeing-747: passenger count 500, cargo load 100\n    # Short haul flight serial number 0, name Airbus-A220: passenger count 110\n    # Short haul flight serial number 1, name Airbus-A220: passenger count 85\n","isMediaType":false,"nameWithExtension":"script.py","title":"script.py"},{"id":"6","path":"/testsuite.py","name":"testsuite","extension":"py","content":"from unittest import TestCase\n\nfrom public.script import Aircraft, IntercontinentalAircraft, ShortHaulAircraft, ControlTower\n\n\nclass Task1Test(TestCase):\n\n    def test_inheritance(self):\n        intercontinental_flight = IntercontinentalAircraft(40, \"intercontinental\", 100)\n        short_haul_flight = ShortHaulAircraft(90, \"short\")\n\n        self.assertTrue(isinstance(intercontinental_flight, Aircraft),\n                        \"IntercontinentalAircraft should inherit from Aircraft\")\n        self.assertTrue(isinstance(short_haul_flight, Aircraft), \"ShortHaulAircraft should inherit from Aircraft\")\n\n    def test_aircraft_get_name(self):\n        aircraft = IntercontinentalAircraft(40, \"intercontinental\", 100)\n        self.assertEqual(aircraft.get_name(), \"intercontinental\")\n\n        aircraft = ShortHaulAircraft(90, \"short\")\n        self.assertEqual(aircraft.get_name(), \"short\")\n\n    def test_aircraft_get_number_of_passengers(self):\n        aircraft = IntercontinentalAircraft(40, \"intercontinental\", 100)\n        self.assertEqual(aircraft.get_number_of_passengers(), 40)\n\n        aircraft = ShortHaulAircraft(90, \"short\")\n        self.assertEqual(aircraft.get_number_of_passengers(), 90)\n\n    def test_calculate_amount_of_fuel_intercontinental(self):\n        aircraft = IntercontinentalAircraft(40, \"intercontinental\", 100)\n        fuel = aircraft.calculate_amount_of_fuel(1000)\n        self.assertEqual(fuel, 210000)\n\n    def test_get_manifest_intercontinental(self):\n        aircraft = IntercontinentalAircraft(40, \"intercontinental\", 100)\n        self.assertEqual(aircraft.manifest,\n                         f\"Intercontinental flight intercontinental: passenger count 40, cargo load 100\")\n\n    def test_calculate_amount_of_fuel_short_haul(self):\n        aircraft = ShortHaulAircraft(90, \"short\")\n        fuel = aircraft.calculate_amount_of_fuel(1000)\n        self.assertEqual(fuel, 9000)\n\n    def test_get_manifest_short_haul(self):\n        aircraft = ShortHaulAircraft(40, \"short\")\n        serial_number = aircraft.get_serial_number()\n        self.assertEqual(aircraft.manifest,\n                         f\"Short haul flight serial number {serial_number}, name short: passenger count 40\")\n\n    def test_list_flights(self):\n        intercontinental_flight = IntercontinentalAircraft(500, \"Boeing-747\", 100)\n        short_haul_flight = ShortHaulAircraft(110, \"Airbus-A220\")\n        short_haul_flight2 = ShortHaulAircraft(85, \"Airbus-A220\")\n\n        tower = ControlTower()\n        tower.add_aircraft(intercontinental_flight)\n        tower.add_aircraft(short_haul_flight)\n        tower.add_aircraft(short_haul_flight2)\n\n        manifests = tower.get_manifests()\n        self.assertEqual(manifests, [\n            \"Intercontinental flight Boeing-747: passenger count 500, cargo load 100\",\n            f\"Short haul flight serial number {short_haul_flight.get_serial_number()}, name Airbus-A220: passenger count 110\",\n            f\"Short haul flight serial number {short_haul_flight2.get_serial_number()}, name Airbus-A220: passenger count 85\"])\n","isMediaType":false,"nameWithExtension":"testsuite.py","title":"testsuite.py"}],"selectedFile":0}}